import test from 'ava';
import onJobStart from '../../src/events/on-job-start';

import { JobStartPayload } from '@openfn/engine-multi';

import { mockChannel } from '../../src/mock/sockets';
import { createAttemptState } from '../../src/util';
import { ATTEMPT_LOG, RUN_START } from '../../src/events';

import pkg from '../../package.json' assert { type: 'json' };

test('set a run id and active job on state', async (t) => {
  const plan = { id: 'attempt-1', jobs: [{ id: 'job-1' }] };
  const jobId = 'job-1';

  const state = createAttemptState(plan);

  const channel = mockChannel({
    [RUN_START]: (x) => x,
    [ATTEMPT_LOG]: (x) => x,
  });

  await onJobStart({ channel, state }, { jobId });

  t.is(state.activeJob, jobId);
  t.truthy(state.activeRun);
});

test('send a run:start event', async (t) => {
  const plan = {
    id: 'attempt-1',
    initialState: 'abc',
    jobs: [
      { id: 'job-1', expression: '.' },
      { id: 'job-2', expression: '.' },
    ],
  };
  const jobId = 'job-1';

  const state = createAttemptState(plan);
  state.activeJob = jobId;
  state.activeRun = 'b';

  const channel = mockChannel({
    [RUN_START]: (evt) => {
      t.is(evt.job_id, jobId);
      t.is(evt.input_dataclip_id, plan.initialState);
      t.truthy(evt.run_id);
      return true;
    },
    [ATTEMPT_LOG]: () => true,
  });

  await onJobStart({ channel, state }, { jobId });
});

test('run:start event should include versions', async (t) => {
  const plan = {
    id: 'attempt-1',
    initialState: 'abc',
    jobs: [{ id: 'job-1', expression: '.' }],
  };
  const jobId = 'job-1';

  const versions = {
    node: process.version,
    engine: '1.0.0',
    compiler: '1.0.0',
    runtime: '1.0.0',
    worker: pkg.version,
  };

  // Simulate an event that would be generated by the worker
  const event: JobStartPayload = {
    jobId,
    workflowId: plan.id,
    versions,
  };

  const state = createAttemptState(plan);
  state.activeJob = jobId;
  state.activeRun = 'b';

  const channel = mockChannel({
    [RUN_START]: (evt) => {
      t.deepEqual(evt.versions, {
        ...versions,
        worker: pkg.version,
      });
      return true;
    },
    [ATTEMPT_LOG]: () => true,
  });

  await onJobStart({ channel, state }, event);
});

test.todo('also logs the version number');
